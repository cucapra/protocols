// Protocol for testing edge detector

struct EdgeDetector {
    // Input pins
    in signal: u1,
    in enable: u1,
    
    // Output pins
    out edge_detected: u1
}

fn setup_edge<DUT: EdgeDetector>() {
    // Set up for edge detection
    DUT.enable := 1'd1;
    DUT.signal := 1'd0;  // Start low
    step();
    
    // Create rising edge
    DUT.signal := 1'd1;  // Go high
    step();
    assert_eq(DUT.edge_detected, 1'd1);  // Should detect edge
    
    // Signal stays high
    step();
    assert_eq(DUT.edge_detected, 1'd0);  // No edge anymore
    
    // Thread ends here
    // If DUT.signal is NOT reset to DontCare, it stays at 1
    // If it IS reset to DontCare and randomized to 0, we get a falling edge!

    fork();
    step();
}

fn check_stable<DUT: EdgeDetector>() {
    // This function expects no edges to be detected
    DUT.enable := 1'd1;
    // Don't set signal - expect it to be stable
    
    step();
    
    // If signal was left at 1 from previous thread: no edge (stable high)
    // If signal was reset to random 0: we get a falling edge internally
    // If signal was reset to random 1: no edge (stable high)
    assert_eq(DUT.edge_detected, 1'd0);  // Might fail depending on reset behavior!

    fork();
    step();
}

