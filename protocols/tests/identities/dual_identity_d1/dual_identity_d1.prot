struct DualIdentity {
  in a: u64,
  in b: u64,
  out s1: u64,
  out s2: u64,
}

// this pair of protocols works by having each thread assign one of dut.a or dut.b,
// but assignment of dut.a is conditioned upon correct assignment of dut.b
// if the threads disagree on the value of b, a remains a DontCare and the assertion fails

// if both threads agree on the value of b:
// iteration 1:
// if two is scheduled first, no assignment happens
// then one is scheduled and dut.b is reassigned NewValue(b)

// iteration 2:
// a is assigned a NewValue(a)
// b is reassigned the same NewValue(b); convergence achieved

// if one is scheduled first, convergence occurs in a single iteration

fn one<dut: DualIdentity>(in b: u64) {
    dut.a := X;
    dut.b := X;


    step();
    fork();

    dut.b := b;

    step();
}


fn two<dut: DualIdentity>(in a: u64, in b: u64) {
    if (dut.b == b) {
        dut.a := a;
    }
    else {
        // TODO: this is a placeholder statement because currently 
        // the scheduler cannot handle empty else blocks
        assert_eq(1'b1, 1'b1);
    }

    step();

    assert_eq(dut.s1, a);
    assert_eq(dut.s2, b);

    fork();
}
