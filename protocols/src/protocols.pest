// Copyright 2024 Cornell University
// released under MIT License
// author: Nikil Shyamunder <nvs26@cornell.edu>
// author: Kevin Laeufer <laeufer@cornell.edu>

WHITESPACE = _{ " " | NEWLINE }
COMMENT = _{ "//" ~ (!"\n" ~ ANY)* }

// Literals
integer = ${ width ~ "'" ~ (bin ~ bin_integer | oct ~ oct_integer | hex ~ hex_integer | dec ~ dec_integer) }
    bin = ${ ("b" | "B") }
    oct = ${ ("o" | "O") }
    hex = ${ ("x" | "X") }
    dec = ${ ("d" | "D") }
    bin_integer = ${ ("_"? ~ ASCII_BIN_DIGIT)+ }
    oct_integer = ${ ("_"? ~ ASCII_OCT_DIGIT)+ }
    hex_integer = ${ ("_"? ~ ASCII_HEX_DIGIT)+ }
    dec_integer = ${ ("_"? ~ ASCII_DIGIT)+ }
    width = { ASCII_DIGIT ~ ("_"? ~ ASCII_DIGIT)* }

dont_care = { "X" }

// Expressions

// Slicing
slice = { path_id ~ "[" ~ dec_integer ~ (":" ~ dec_integer)? ~ "]" }

primary = _{slice | integer | "(" ~ expr ~ ")" | dont_care | path_id}
atom = _{primary | unary_op? ~ primary}
unary_op = _ { not }
    not = { "!" }
bin_op = _{ eq | concat }
    eq = { "==" }
    concat = { "+" }

// handle binary operations and indexing operations
expr = { atom ~ (bin_op ~ atom)*}

id = _{ ASCII_ALPHA  ~ (ASCII_ALPHANUMERIC | "_" )* }
path_id = @{ id ~ ("." ~ id)* }
tpe = { "u" ~ dec_integer }
assign = {path_id ~ ":=" ~ (expr | path_id) ~ ";" }
// cmd = { path_id ~ "(" ~ expr? ~ ")" ~ ";"}
step = { "step" ~ "(" ~ dec_integer? ~ ")" ~ ";"}
fork = { "fork" ~ "()" ~ ";"}
stmt = _{ (assign | step | fork | while_loop | cond | assert_eq ) }
dir = { "in" | "out" }
arg = { dir ~ path_id ~ ":" ~ tpe }
arglist = { (arg ~ "," ~ arglist) | arg ~ ","? }
type_param = { "<" ~ path_id ~ ":" ~ path_id ~ ">" }

// Loops
while_loop = { "while" ~ expr ~ "{" ~ stmt* ~ "}" }

// Assertions
assert_eq = { "assert_eq" ~ "(" ~ expr ~ "," ~ expr ~ ")" ~ ";" }

// Conditionals
if = { "if" ~ expr ~ "{" ~ stmt* ~ "}" }
else = { "else" ~ "{" ~ stmt* ~ "}" }
cond = { if ~ else? }

// Structs
struct_def = { "struct" ~ path_id ~ "{" ~ arglist? ~ "}" }

fun = { "fn" ~ path_id ~ type_param ~ "(" ~ arglist? ~ ")" ~ "{" ~ stmt* ~ "}" }
file = { SOI ~ (fun | struct_def)* ~ EOI }