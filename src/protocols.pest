// Copyright 2024 Cornell University
// released under MIT License
// author: Nikil Shyamunder <nikil.shyamsunder@gmail.com>
// author: Kevin Laeufer <laeufer@cornell.edu>

WHITESPACE = _{ " " | NEWLINE }
COMMENT = _{ "//" ~ (!"\n" ~ ANY)* }

// Literals
// integer = ${ bin_integer | oct_integer | hex_integer | dec_integer }
//  bin_integer = ${ "0" ~ ("b" | "B") ~ ("_"? ~ ASCII_BIN_DIGIT)+ }
//  oct_integer = ${ "0" ~ ("o" | "O") ~ ("_"? ~ ASCII_OCT_DIGIT)+ }
//  hex_integer = ${ "0" ~ ("x" | "X") ~ ("_"? ~ ASCII_HEX_DIGIT)+ }
integer = ${ ASCII_DIGIT ~ ("_"? ~ ASCII_DIGIT)* }
dont_care = { "X" }

// Expressions
primary = _{ integer | "(" ~ expr ~ ")" | dont_care | path_id }
atom = _{primary | unary_op? ~ primary}
unary_op = _ { not }
    // negate = { "-" }
    not = { "!" }
bin_op = _{ eq | log_and }
// bin_op = _{ neq | leq | eq | log_and | log_or | shift_left | shift_right | add | subtract | multiply | divide | mod }
//    neq = { "!=" }
//   leq = { "<= "}
    eq = { "== "}
//    add = { "+" }
    log_and = { "&&" }
//    log_or = { "||" }
//    subtract = { "-" }
//    multiply = { "*" }
//    divide = { "/" }
//    mod = { "%" }
//    shift_left = { "<<" }
//    shift_right = { ">>" }

expr = { atom ~ (bin_op ~ atom)* }

id = _{ ASCII_ALPHA  ~ (ASCII_ALPHANUMERIC | "_" )* }
path_id = @{ id ~ ("." ~ id)* }
tpe = { "u" ~ integer }
assign = {path_id ~ ":=" ~ (expr | path_id) ~ ";" }
cmd = { path_id ~ "(" ~ ")" ~ ";"}
stmt = _{ (assign | cmd | while_loop | cond | assert_eq ) }
dir = { "in" | "out" }
arg = { dir ~ path_id ~ ":" ~ tpe }
arglist = { (arg ~ "," ~ arglist) | arg ~ ","? }
type_param = { "<" ~ path_id ~ ":" ~ path_id ~ ">" }

// Loops
while_loop = { "while" ~ expr ~ "{" ~ stmt* ~ "}" }

// Assertions
assert_eq = { "assert_eq" ~ "(" ~ expr ~ "," ~ expr ~ ")" ~ ";" }

// Conditionals
if = { "if" ~ expr ~ "{" ~ stmt* ~ "}" }
else = { "else" ~ "{" ~ stmt* ~ "}" }
cond = { if ~ else? }

// Structs
struct_def = { "struct" ~ path_id ~ "{" ~ arglist? ~ "}" }

fun = { "fn" ~ path_id ~ type_param ~ "(" ~ arglist ~ ")" ~ "{" ~ stmt* ~ "}" }
file = { SOI ~ (fun | struct_def)* ~ EOI }