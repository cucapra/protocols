// maps to https://github.com/ekiwi/serv/blob/d1d4e6d259694e957b67a7413820ede637fc106e/rtl/serv_regfile.v#L2
struct Regfile {
  in i_go: u1,
  out o_ready: u1,
  in i_rd_en: u1,
  in i_rd_addr: u5,
  in i_rd: u1,
  in i_rs1_addr: u5,
  in i_rs2_addr: u5,
  out o_rs1: u1,
  out o_rs2: u1,
}

// source: https://github.com/ekiwi/transactional-verification-with-protocols/blob/039fb8d5beafb3c4a464e5dac3dc8a3e00b69f04/serv/check_regfile.py#L17
fn read_write<R: Regfile>(
    in rs1_addr: u5,
    out rs1_data: u32,
    out rs2_data: u32,
    in rs2_addr: u5,
    in rd_enable: u1,
    in rd_addr: u5,
    in rd_data: u32,
  ) {

  R.i_go := 1'b1;
  R.i_rd_en := 1'b0;
  assert_eq(R.o_ready, 1'b0);
  step();

  R.i_go := 1'b0; // <- remains low for the rest of this transaction
  R.i_rs1_addr := rs1_addr;
  R.i_rs2_addr := rs2_addr;
  assert_eq(R.o_ready, 1'b0);
  step();

  assert_eq(R.o_ready, 1'b1); // <- changes to 1
  step();

  R.i_rd_en := rd_enable;
  R.i_rd_addr := rd_addr;

  // apply 1'b1 bit per cycle
  R.i_rd := rd_data[0];
  assert_eq(R.o_rs1, rs1_data[0]);
  assert_eq(R.o_rs2, rs2_data[0]);
  assert_eq(R.o_ready, 1'b0);
  step();


  R.i_rd := rd_data[1];
  assert_eq(R.o_rs1, rs1_data[1]);
  assert_eq(R.o_rs2, rs2_data[1]);
  assert_eq(R.o_ready, 1'b0);
  step();


  R.i_rd := rd_data[2];
  assert_eq(R.o_rs1, rs1_data[2]);
  assert_eq(R.o_rs2, rs2_data[2]);
  assert_eq(R.o_ready, 1'b0);
  step();


  R.i_rd := rd_data[3];
  assert_eq(R.o_rs1, rs1_data[3]);
  assert_eq(R.o_rs2, rs2_data[3]);
  assert_eq(R.o_ready, 1'b0);
  step();


  R.i_rd := rd_data[4];
  assert_eq(R.o_rs1, rs1_data[4]);
  assert_eq(R.o_rs2, rs2_data[4]);
  assert_eq(R.o_ready, 1'b0);
  step();


  R.i_rd := rd_data[5];
  assert_eq(R.o_rs1, rs1_data[5]);
  assert_eq(R.o_rs2, rs2_data[5]);
  assert_eq(R.o_ready, 1'b0);
  step();


  R.i_rd := rd_data[6];
  assert_eq(R.o_rs1, rs1_data[6]);
  assert_eq(R.o_rs2, rs2_data[6]);
  assert_eq(R.o_ready, 1'b0);
  step();


  R.i_rd := rd_data[7];
  assert_eq(R.o_rs1, rs1_data[7]);
  assert_eq(R.o_rs2, rs2_data[7]);
  assert_eq(R.o_ready, 1'b0);
  step();


  R.i_rd := rd_data[8];
  assert_eq(R.o_rs1, rs1_data[8]);
  assert_eq(R.o_rs2, rs2_data[8]);
  assert_eq(R.o_ready, 1'b0);
  step();


  R.i_rd := rd_data[9];
  assert_eq(R.o_rs1, rs1_data[9]);
  assert_eq(R.o_rs2, rs2_data[9]);
  assert_eq(R.o_ready, 1'b0);
  step();


  R.i_rd := rd_data[10];
  assert_eq(R.o_rs1, rs1_data[10]);
  assert_eq(R.o_rs2, rs2_data[10]);
  assert_eq(R.o_ready, 1'b0);
  step();


  R.i_rd := rd_data[11];
  assert_eq(R.o_rs1, rs1_data[11]);
  assert_eq(R.o_rs2, rs2_data[11]);
  assert_eq(R.o_ready, 1'b0);
  step();


  R.i_rd := rd_data[12];
  assert_eq(R.o_rs1, rs1_data[12]);
  assert_eq(R.o_rs2, rs2_data[12]);
  assert_eq(R.o_ready, 1'b0);
  step();


  R.i_rd := rd_data[13];
  assert_eq(R.o_rs1, rs1_data[13]);
  assert_eq(R.o_rs2, rs2_data[13]);
  assert_eq(R.o_ready, 1'b0);
  step();


  R.i_rd := rd_data[14];
  assert_eq(R.o_rs1, rs1_data[14]);
  assert_eq(R.o_rs2, rs2_data[14]);
  assert_eq(R.o_ready, 1'b0);
  step();


  R.i_rd := rd_data[15];
  assert_eq(R.o_rs1, rs1_data[15]);
  assert_eq(R.o_rs2, rs2_data[15]);
  assert_eq(R.o_ready, 1'b0);
  step();


  R.i_rd := rd_data[16];
  assert_eq(R.o_rs1, rs1_data[16]);
  assert_eq(R.o_rs2, rs2_data[16]);
  assert_eq(R.o_ready, 1'b0);
  step();


  R.i_rd := rd_data[17];
  assert_eq(R.o_rs1, rs1_data[17]);
  assert_eq(R.o_rs2, rs2_data[17]);
  assert_eq(R.o_ready, 1'b0);
  step();


  R.i_rd := rd_data[18];
  assert_eq(R.o_rs1, rs1_data[18]);
  assert_eq(R.o_rs2, rs2_data[18]);
  assert_eq(R.o_ready, 1'b0);
  step();


  R.i_rd := rd_data[19];
  assert_eq(R.o_rs1, rs1_data[19]);
  assert_eq(R.o_rs2, rs2_data[19]);
  assert_eq(R.o_ready, 1'b0);
  step();


  R.i_rd := rd_data[20];
  assert_eq(R.o_rs1, rs1_data[20]);
  assert_eq(R.o_rs2, rs2_data[20]);
  assert_eq(R.o_ready, 1'b0);
  step();


  R.i_rd := rd_data[21];
  assert_eq(R.o_rs1, rs1_data[21]);
  assert_eq(R.o_rs2, rs2_data[21]);
  assert_eq(R.o_ready, 1'b0);
  step();


  R.i_rd := rd_data[22];
  assert_eq(R.o_rs1, rs1_data[22]);
  assert_eq(R.o_rs2, rs2_data[22]);
  assert_eq(R.o_ready, 1'b0);
  step();


  R.i_rd := rd_data[23];
  assert_eq(R.o_rs1, rs1_data[23]);
  assert_eq(R.o_rs2, rs2_data[23]);
  assert_eq(R.o_ready, 1'b0);
  step();


  R.i_rd := rd_data[24];
  assert_eq(R.o_rs1, rs1_data[24]);
  assert_eq(R.o_rs2, rs2_data[24]);
  assert_eq(R.o_ready, 1'b0);
  step();


  R.i_rd := rd_data[25];
  assert_eq(R.o_rs1, rs1_data[25]);
  assert_eq(R.o_rs2, rs2_data[25]);
  assert_eq(R.o_ready, 1'b0);
  step();


  R.i_rd := rd_data[26];
  assert_eq(R.o_rs1, rs1_data[26]);
  assert_eq(R.o_rs2, rs2_data[26]);
  assert_eq(R.o_ready, 1'b0);
  step();


  R.i_rd := rd_data[27];
  assert_eq(R.o_rs1, rs1_data[27]);
  assert_eq(R.o_rs2, rs2_data[27]);
  assert_eq(R.o_ready, 1'b0);
  step();


  R.i_rd := rd_data[28];
  assert_eq(R.o_rs1, rs1_data[28]);
  assert_eq(R.o_rs2, rs2_data[28]);
  assert_eq(R.o_ready, 1'b0);
  step();


  R.i_rd := rd_data[29];
  assert_eq(R.o_rs1, rs1_data[29]);
  assert_eq(R.o_rs2, rs2_data[29]);
  assert_eq(R.o_ready, 1'b0);
  step();


  R.i_rd := rd_data[30];
  assert_eq(R.o_rs1, rs1_data[30]);
  assert_eq(R.o_rs2, rs2_data[30]);
  assert_eq(R.o_ready, 1'b0);
  step();


  R.i_rd := rd_data[31];
  assert_eq(R.o_rs1, rs1_data[31]);
  assert_eq(R.o_rs2, rs2_data[31]);
  assert_eq(R.o_ready, 1'b0);
}

// this transaction describes what happens when the register file is not in use
fn idle<R: Regfile>() {
  R.i_go := 1'b0;
  R.i_rd_en := 1'b0;
  assert_eq(R.o_ready, 1'b0);
}