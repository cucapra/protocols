struct picorv32 {
  in pcpi_insn: u32,
  in pcpi_rs1: u32,
  in pcpi_rs2: u32,
  out pcpi_wr: u1,
  out pcpi_ready: u1,
  in pcpi_valid: u1,
  out pcpi_rd: u32,
}

// Adapted from https://github.com/ekiwi/transactional-verification-with-protocols/blob/039fb8d5beafb3c4a464e5dac3dc8a3e00b69f04/picorv32/picorv32_pcpi_mul.py
fn pcpi_mul<p: picorv32>(
    in rs1_data: u32,
    in rs2_data: u32,
    out rd_data: u32,
    in insn: u32,
  ) {
  p.pcpi_insn := insn;
  // p.pcpi_insn := 33554483; // multiplication insn. TODO: allow binary values
  p.pcpi_rs1 := rs1_data;
  p.pcpi_rs2 := rs2_data;
  
  assert_eq(p.pcpi_wr, 1'b0);
  assert_eq(p.pcpi_ready, 1'b0);

  step();

  p.pcpi_valid := 1'b0;
  p.pcpi_insn := X;
  p.pcpi_rs1 := X;
  p.pcpi_rs2 := X;

  while (!(p.pcpi_ready == 1'b1)) {
    step();
  }

  assert_eq(p.pcpi_wr, 1'b1);
  assert_eq(p.pcpi_rd, rd_data);
}
