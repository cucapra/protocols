// used to test having multiple transactions in the same file
// This protocol does not correspond to a specific verilog module, as it's never executed.

struct Multiplier {
  in a: u32,
  in b: u32,
  out s: u32
}

fn mul<dut: Multiplier>(in a: u32, in b: u32, out s: u32) {
  dut.a := a;
  dut.b := b;
  // hold a and b stable for two cycles
  step();
  step();
  // can apply a new input after two cycles
  fork();
  // after, it does not matter what we apply to these ports
  dut.a := X;
  dut.b := X;
  step();
  s := dut.s;
}

fn ignore<dut: Multiplier>(in a: u32, in b: u32, out s: u32) {
  dut.a := a;
  dut.b := b;
  // hold a and b stable for two cycles
  step();
  step();
  // can apply a new input after two cycles
  fork();
  // after, it does not matter what we apply to these ports
  dut.a := X;
  dut.b := X;
  step();
  s := dut.s;
}