// ARGS: --wave alus/alu_d1.fst --instances alu_d1:ALU 
struct ALU {
  in a: u32,
  in b: u32,
  in op: u2,
  out s: u32,
}

fn add<DUT: ALU>(in a: u32, in b: u32, out s: u32) {
  DUT.a := a;
  DUT.b := b;
  DUT.op := 2'b00;
  step();
  DUT.a := X;
  DUT.b := X;
  assert_eq(s, DUT.s);
  fork();
  step();
}

fn sub<DUT: ALU>(in a: u32, in b: u32, out s: u32) {
  DUT.a := a;
  DUT.b := b;
  DUT.op := 2'b01;
  step();
  DUT.a := X;
  DUT.b := X;
  assert_eq(s, DUT.s);
  fork();
  step();
}

fn and<DUT: ALU>(in a: u32, in b: u32, out s: u32) {
  DUT.a := a;
  DUT.b := b;
  DUT.op := 2'b10;
  step();
  DUT.a := X;
  DUT.b := X;
  assert_eq(s, DUT.s);
  fork();
  step();
}

fn or<DUT: ALU>(in a: u32, in b: u32, out s: u32) {
  DUT.a := a;
  DUT.b := b;
  DUT.op := 2'b11;
  step();
  DUT.a := X;
  DUT.b := X;
  assert_eq(s, DUT.s);
  fork();
  step();
}